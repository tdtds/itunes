#!/usr/bin/env ruby
#coding:utf-8

#
# syncing music files with iTunes
#
# Copyright (C) 2010, TADA Tadashi <t@tdtds.jp>
# You can redistribute it and/or modify it under GPL.
#

$: << '../lib' if $DEBUG
require 'itunes'
require 'fileutils'
require 'yaml'
require 'ya2yaml'

class SyncTunes
	include FileUtils

	def initialize
		begin
			@itunes = ITunes::App::new
			@conf = Config::new
		rescue WIN32OLERuntimeError
			raise RuntimeError::new( "couldn't connect to iTunes." )
		end
	end

	def default_config
		@conf.default( @itunes ).ya2yaml
	end

	def set_conf( yaml )
		yaml.sub!( /\A\xEF\xBB\xBF/, '' ) # remove BOM added by Windows Notepad.
		@conf.set_conf( YAML::load( yaml ) )
	end

	def sync
		list = @conf.list_files( @itunes )

		if @conf['music_sync']
			music_sync( list )
			music_make_playlist( list )
		end

		if @conf['video_sync']
			video_sync( list )
		end
	end

private

	def file_list_by_path( path )
		files = {}
		Pathname( path ).find do |file|
			next if file.directory?
			files[file] = file.mtime.strftime( '%Y/%m/%d %H:%M:%S' )
		end
		files
	end

	def file_list_by_playlist( list )
		files = {}
		list.each do |playlist, tracks|
			tracks.each do |t|
				file = Pathname::new( t.path )
				files[file] = t.modify unless files[file]
			end
		end
		files
	end

	def music_sync( list )
		mkdir_p( @conf['music_dest'] )
		dest_files = file_list_by_path( @conf['music_dest'] )
		src_files = file_list_by_playlist( list )

		# copy new or updated files
		src_files.each do |src,src_modify|
			dest_dir = Pathname::new( @conf['music_dest'] ) +
				src.dirname.dirname.basename +
				src.dirname.basename
			mkdir_p( dest_dir ) unless dest_dir.exist?
			dest = dest_dir + src.basename
			if dest.exist?
				if src_modify <= dest_files[dest]
					dest_files.delete( dest )
					next
				end
			end
			cp( src, dest )
		end

		# delete files only in dest
		dest_files.each do |dest,dest_modify|
			dest.delete
		end
	end

	def music_make_playlist( list )
		dest = Pathname::new( @conf['music_dest'] )
		list.each do |playlist, tracks|
			open( dest + "#{playlist}.m3u", 'w:utf-8' ) do |f|
				tracks.each do |t|
					fname = Pathname::new( t.path )
					f.puts( fname.dirname.dirname.basename +
						fname.dirname.basename +
						fname.basename )
				end
			end
		end
	end

	def video_sync( list )
		mkdir_p( @conf['video_dest'] )
	end
end

class Config < Hash
	def initialize
		self['music_sync'] = true
		self['music_dest'] = ''
		self['video_sync'] = false
		self['video_dest'] = ''
		self['playlists'] = []
		super
	end

	def default( itunes )
		self['music_dest'] = 'F:/Music'
		self['video_dest'] = 'F:/Video'
		itunes.each_playlist do |list|
			self['playlists'] << list.name.encode( 'UTF-8' ) if list.playlist?
		end
		self
	end

	def set_conf( conf )
		self.update( conf )
	end

	def list_files( itunes )
		file_spec = Struct::new( 'FileSpec', :name, :artist, :album, :path, :modify )
		list = {}
		self['playlists'].each do |list_name|
			tracks = []
			itunes.playlist( list_name ).each_track do |track|
				tracks << file_spec::new(
					track.name,
					track.artist,
					track.album,
					track.location,
					track.modificationdate )
			end
			list[list_name] = tracks unless tracks.empty?
		end
		list
	end
end

if __FILE__ == $0 then
	require 'pp'
	require 'pathname'

	def err( msg_text, exit_code = nil )
		$stderr.puts "#$0: #{msg_text}"
		exit exit_code if exit_code
	end

	def msg( msg_text )
		$stderr.puts "#$0: #{msg_text}" if $DEBUG
	end

	begin
		app = SyncTunes::new
		msg 'connecting to iTunes successfully.'
	rescue RuntimeError
		err $!.message, -1
	end

	if ARGV.length == 0 then
		msg 'generating default configration file and putting to stdout.'
		print app.default_config
		exit 0
	end

	msg 'loading specified configration file.'
	app.set_conf( open( Pathname::new( ARGV.shift ), 'r:UTF-8', &:read ) )

	begin
		msg 'executing sync.'
		app.sync
	rescue Errno::ENOENT
		err $!, -1
	end

	msg 'done.'
end
